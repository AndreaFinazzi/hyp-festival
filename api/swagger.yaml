---
swagger: "2.0"
info:
  description: "Festival Server\n"
  version: "1.0.0"
  title: "Swagger Festival"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "pietro.forconi@mail.polimi.it"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/api/"
tags:
- name: "performer"
  description: "Access to Festival's performers informations."
- name: "artistic_event"
  description: "Access to Festival's artistic event informations."
- name: "seminar"
  description: "Access to Festival's seminar informations."
- name: "user"
  description: "Allow registration and return user logged informations."
- name: "reservation"
  description: "Allow logged user to make a booking for an artistic event."
- name: "photo"
  description: "Access to photos about performers and artistic_event."
schemes:
- "https"
- "http"
paths:
  /performer:
    get:
      tags:
      - "performer"
      summary: "get all Performers in the Festival"
      operationId: "getPerformers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Performer"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "Performer"
  /performer/{id_performer}:
    get:
      tags:
      - "performer"
      summary: "get performer by id"
      operationId: "getPerformersById"
      produces:
      - "application/json"
      parameters:
      - name: "id_performer"
        in: "path"
        description: "id of the performer to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Performer"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "Performer"
  /performer/performing_in/{id_event}:
    get:
      tags:
      - "performer"
      summary: "get all performers that performing in the event passed by parameter."
      operationId: "getPerformersAtEvent"
      produces:
      - "application/json"
      parameters:
      - name: "id_event"
        in: "path"
        description: "id of the event"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Performer"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "Performer"
  /artistic_event:
    get:
      tags:
      - "artistic_event"
      summary: "get all artistic events scheduled in the Festival"
      operationId: "getArtisticEvent"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ArtisticEvent"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "ArtisticEvent"
  /artistic_event/{id_artistic_event}:
    get:
      tags:
      - "artistic_event"
      summary: "get artistic event by id."
      operationId: "getArtisticEventById"
      produces:
      - "application/json"
      parameters:
      - name: "id_artistic_event"
        in: "path"
        description: "id of the artistic event to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ArtisticEvent"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "ArtisticEvent"
  /artistic_event/by_date/{date}:
    get:
      tags:
      - "artistic_event"
      summary: "get all artistic events scheduled in the Festival at the date passed\
        \ by parameter."
      operationId: "getArtisticEventByDate"
      produces:
      - "application/json"
      parameters:
      - name: "date"
        in: "path"
        description: "date of the artistic events to return"
        required: true
        type: "string"
        format: "date"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ArtisticEvent"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "ArtisticEvent"
  /artistic_event/performed_by/{id_performer}:
    get:
      tags:
      - "artistic_event"
      summary: "get all artistic events scheduled in the Festival performed by the\
        \ performer passed by parameter with id."
      operationId: "getArtisticEventByPerformer"
      produces:
      - "application/json"
      parameters:
      - name: "id_performer"
        in: "path"
        description: "id of the performer."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ArtisticEvent"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "ArtisticEvent"
  /artistic_event/discussed_in/{id_seminar}:
    get:
      tags:
      - "artistic_event"
      summary: "get all artistic events scheduled in the Festival discussed in the\
        \ seminar passed as parameter by id."
      operationId: "getArtisticEventBySeminar"
      produces:
      - "application/json"
      parameters:
      - name: "id_seminar"
        in: "path"
        description: "id of the seminar."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ArtisticEvent"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "ArtisticEvent"
  /artistic_event/by_type/{type}:
    get:
      tags:
      - "artistic_event"
      summary: "get all artistic events scheduled in the Festival by type passed as\
        \ parameter"
      operationId: "getArtisticEventByType"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "type of artistic event."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ArtisticEvent"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "ArtisticEvent"
  /artistic_event/booked_by/{id_user}:
    get:
      tags:
      - "artistic_event"
      summary: "get all artistic events scheduled in the Festival booked by user passed\
        \ as parameter."
      operationId: "getArtisticEventsBookedByUser"
      produces:
      - "application/json"
      parameters:
      - name: "id_user"
        in: "path"
        description: "id of the user."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ArtisticEvent"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "ArtisticEvent"
  /seminar:
    get:
      tags:
      - "seminar"
      summary: "get all seminars scheduled in the Festival"
      operationId: "getSeminar"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Seminar"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "Seminar"
  /seminar/{id_seminar}:
    get:
      tags:
      - "seminar"
      summary: "get all Seminars in the Festival"
      operationId: "getSeminarById"
      produces:
      - "application/json"
      parameters:
      - name: "id_seminar"
        in: "path"
        description: "id of the seminar to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Seminar"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "Seminar"
  /seminar/discusses/{id_artistic_event}:
    get:
      tags:
      - "seminar"
      summary: "get all seminars that discusses the artistic event passed by id as\
        \ query parameter"
      operationId: "getSeminarByArtisticEvent"
      produces:
      - "application/json"
      parameters:
      - name: "id_artistic_event"
        in: "path"
        description: "id of the artistic event"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Seminar"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "Seminar"
  /photo/by_performer/{id_performer}:
    get:
      tags:
      - "photo"
      summary: "get all photo about the performer passed by id as parameter."
      operationId: "getPhotoByPerformer"
      produces:
      - "application/json"
      parameters:
      - name: "id_performer"
        in: "path"
        description: "id of the performer"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Photo"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "Photo"
  /photo/by_artistic_event/{id_artistic_event}:
    get:
      tags:
      - "photo"
      summary: "get all photo about the artistic event passed by id as parameter."
      operationId: "getPhotoByArtisticEvent"
      produces:
      - "application/json"
      parameters:
      - name: "id_artistic_event"
        in: "path"
        description: "id of the artistic event"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful Operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Photo"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "Photo"
  /content/{name_content}:
    get:
      tags:
        - "content"
      summary: "show specific content saved in pages db table."
      operationId: "getContentByName"
      produces:
      - "application/json"
      parameters:
      - name: "name_content"
        in: "path"
        description: "name of the requested content"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Content"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "Content"
  /user/{id_user}:
    get:
      tags:
      - "user"
      summary: "show to the logged user his personal informations."
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id_user"
        in: "path"
        description: "id of the logged user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        500:
          description: "Unexpected Error"
      x-swagger-router-controller: "User"
  /user/register:
    post:
      tags:
      - "user"
      summary: "register new user to the web site"
      operationId: "registerUser"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "first_name"
        in: "formData"
        description: "first name of the user to log"
        required: true
        type: "string"
      - name: "last_name"
        in: "formData"
        description: "last name of the user to log"
        required: true
        type: "string"  
      - name: "email"
        in: "formData"
        description: "email of the user to log"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password of the user to log"
        required: true
        type: "string"
        format: "password"
      - name: "password_confirm"
        in: "formData"
        description: "password confirm of the user to log"
        required: true
        type: "string"  
        format: "password"
      responses:
        200:
          description: "successfull operation"
        405:
          description: "invalid input"
      x-swagger-router-controller: "User"
  /user/login:
    post:
      tags:
      - "user"
      summary: "log the user."
      operationId: "logUser"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "formData"
        description: "email of the user to log"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password of the user to log"
        required: true
        type: "string"
        format: "password"
      responses:
        200:
          description: "Successfully Logged"
          schema:
            $ref: "#/definitions/User"
        405:
          description: "Invalid Input"
        401:
          description: "Unauthorized"  
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "log out the user."
      operationId: "logOutUser"
      consumes:
      - "application/x-www-form-urlencoded"
      responses:
        200:
          description: "Successfully Logged Out"
        500:
          description: "Unexpected Error" 
      x-swagger-router-controller: "User"    
      
  /reservation:
    get:
      tags:
      - "reservation"
      summary: "get all reservations about the logged user."
      operationId: "getReservations"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Reservation"
        500:
          description: "Unexpected Error"
        401:
          description: "Unauthorized"  
      x-swagger-router-controller: "Reservation"
    post:
      tags:
      - "reservation"
      summary: "Add a reservation for the logged user."
      operationId: "postReservation"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "id_artistic_event"
        in: "formData"
        description: "id of the artistic event to book"
        required: true
        type: "integer"
        format: "int64"      
      responses:
        200:
          description: "Successfull Operation"
        405:
          description: "Invalid Input"
      x-swagger-router-controller: "Reservation"
definitions:
  ArtisticEvent:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      date:
        type: "string"
        format: "date"
      type:
        type: "string"
      fact_sheet:
        type: "string"
      location:
        type: "string"
      abstract:
        type: "string"
      primary_photo:
        $ref: "#/definitions/Photo"
      treated_by:
        type: "array"
        items:
          $ref: "#/definitions/Seminar"
    xml:
      name: "ArtisticEvent"
    example:
      date: "2000-01-23"
      fact_sheet: "fact_sheet"
      treated_by:
      - date: "2000-01-23"
        location: "location"
        id: 6
        title: "title"
      - date: "2000-01-23"
        location: "location"
        id: 6
        title: "title"
      location: "location"
      id: 0
      abstract: "abstract"
      primary_photo:
        id: 6
        content:
        - "content"
        - "content"
        path: "/path/to/img.png"
      title: "title"
      type: "type"
  Content:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      title:
        type: "string"
      content:
        type: "string"
      photo:
        $ref: "#/definitions/Photo"
    example:
      content: "content"
      title: "title"
      name: "name"
      id: 8
      primary_photo:
        id: 6
        content:
        - "content"
        - "content"
        path: "/path/to/img.png"

  Seminar:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      date:
        type: "string"
        format: "date"
      location:
        type: "string"
    example:
      date: "2000-01-23"
      location: "location"
      id: 6
      title: "title"
  Performer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      primary_photo:
        $ref: "#/definitions/Photo"
      type:
        type: "string"
      name:
        type: "string"
      current_affiliations:
        type: "string"
      achievements:
        type: "string"
      company_members:
        type: "string"
      description:
        type: "string"
    example:
      description: "description"
      achievements: "achievements"
      current_affiliations: "current_affiliations"
      company_members: "company_members"
      name: "name"
      id: 0
      primary_photo:
        id: 6
        content:
        - "content"
        - "content"
        path: "/path/to/img.png"
      type: "type"
  Photo:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      content:
        type: "array"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      path:
        type: "string"
    example:
      id: 6
      content:
      - "content"
      - "content"
      path:
        "mario_draghi.png"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      first_name:
        type: "string"
      last_name:
        type: "string"
      email:
        type: "string"    
    example:
      last_name: "last_name"
      id: 0
      first_name: "first_name"
      email: "email"
  Reservation:
    type: "object"
    properties:
      id_user:
        type: "integer"
        format: "int64"
      id_artistic_event:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      title_artistic_event:
        type: "string"
      photo:
        $ref: "#/definitions/Photo"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
